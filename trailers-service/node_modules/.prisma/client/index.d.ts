
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Trailer
 * 
 */
export type Trailer = $Result.DefaultSelection<Prisma.$TrailerPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const TrailerType: {
  DRY_VAN: 'DRY_VAN',
  REEFER: 'REEFER',
  FLATBED: 'FLATBED',
  TANKER: 'TANKER',
  LOWBOY: 'LOWBOY',
  STEP_DECK: 'STEP_DECK',
  OTHER: 'OTHER'
};

export type TrailerType = (typeof TrailerType)[keyof typeof TrailerType]


export const TrailerStatus: {
  AVAILABLE: 'AVAILABLE',
  ASSIGNED: 'ASSIGNED',
  MAINTENANCE: 'MAINTENANCE',
  OUT_OF_SERVICE: 'OUT_OF_SERVICE'
};

export type TrailerStatus = (typeof TrailerStatus)[keyof typeof TrailerStatus]


export const OwnershipType: {
  OWNED: 'OWNED',
  LEASED: 'LEASED',
  RENTED: 'RENTED'
};

export type OwnershipType = (typeof OwnershipType)[keyof typeof OwnershipType]

}

export type TrailerType = $Enums.TrailerType

export const TrailerType: typeof $Enums.TrailerType

export type TrailerStatus = $Enums.TrailerStatus

export const TrailerStatus: typeof $Enums.TrailerStatus

export type OwnershipType = $Enums.OwnershipType

export const OwnershipType: typeof $Enums.OwnershipType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Trailers
 * const trailers = await prisma.trailer.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Trailers
   * const trailers = await prisma.trailer.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.trailer`: Exposes CRUD operations for the **Trailer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Trailers
    * const trailers = await prisma.trailer.findMany()
    * ```
    */
  get trailer(): Prisma.TrailerDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.9.0
   * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Trailer: 'Trailer'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "trailer"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Trailer: {
        payload: Prisma.$TrailerPayload<ExtArgs>
        fields: Prisma.TrailerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TrailerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrailerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TrailerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrailerPayload>
          }
          findFirst: {
            args: Prisma.TrailerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrailerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TrailerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrailerPayload>
          }
          findMany: {
            args: Prisma.TrailerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrailerPayload>[]
          }
          create: {
            args: Prisma.TrailerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrailerPayload>
          }
          createMany: {
            args: Prisma.TrailerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TrailerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrailerPayload>[]
          }
          delete: {
            args: Prisma.TrailerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrailerPayload>
          }
          update: {
            args: Prisma.TrailerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrailerPayload>
          }
          deleteMany: {
            args: Prisma.TrailerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TrailerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TrailerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrailerPayload>[]
          }
          upsert: {
            args: Prisma.TrailerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TrailerPayload>
          }
          aggregate: {
            args: Prisma.TrailerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTrailer>
          }
          groupBy: {
            args: Prisma.TrailerGroupByArgs<ExtArgs>
            result: $Utils.Optional<TrailerGroupByOutputType>[]
          }
          count: {
            args: Prisma.TrailerCountArgs<ExtArgs>
            result: $Utils.Optional<TrailerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    trailer?: TrailerOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */



  /**
   * Models
   */

  /**
   * Model Trailer
   */

  export type AggregateTrailer = {
    _count: TrailerCountAggregateOutputType | null
    _avg: TrailerAvgAggregateOutputType | null
    _sum: TrailerSumAggregateOutputType | null
    _min: TrailerMinAggregateOutputType | null
    _max: TrailerMaxAggregateOutputType | null
  }

  export type TrailerAvgAggregateOutputType = {
    year: number | null
    length: number | null
    width: number | null
    height: number | null
    capacity: number | null
    axleCount: number | null
    purchasePrice: Decimal | null
    gvwr: number | null
  }

  export type TrailerSumAggregateOutputType = {
    year: number | null
    length: number | null
    width: number | null
    height: number | null
    capacity: number | null
    axleCount: number | null
    purchasePrice: Decimal | null
    gvwr: number | null
  }

  export type TrailerMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    trailerId: string | null
    trailerType: string | null
    year: number | null
    vin: string | null
    color: string | null
    length: number | null
    width: number | null
    height: number | null
    capacity: number | null
    axleCount: number | null
    ownershipType: string | null
    purchaseDate: Date | null
    leaseEndDate: Date | null
    purchasePrice: Decimal | null
    licensePlate: string | null
    issuingState: string | null
    registrationExp: Date | null
    insurancePolicy: string | null
    insuranceExp: Date | null
    jurisdiction: string | null
    gvwr: number | null
    status: string | null
    assignedYard: string | null
    currentLocation: string | null
    attachedTruckId: string | null
    titleDoc: string | null
    leaseDoc: string | null
    registrationDoc: string | null
    insuranceDoc: string | null
    inspectionDoc: string | null
  }

  export type TrailerMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    trailerId: string | null
    trailerType: string | null
    year: number | null
    vin: string | null
    color: string | null
    length: number | null
    width: number | null
    height: number | null
    capacity: number | null
    axleCount: number | null
    ownershipType: string | null
    purchaseDate: Date | null
    leaseEndDate: Date | null
    purchasePrice: Decimal | null
    licensePlate: string | null
    issuingState: string | null
    registrationExp: Date | null
    insurancePolicy: string | null
    insuranceExp: Date | null
    jurisdiction: string | null
    gvwr: number | null
    status: string | null
    assignedYard: string | null
    currentLocation: string | null
    attachedTruckId: string | null
    titleDoc: string | null
    leaseDoc: string | null
    registrationDoc: string | null
    insuranceDoc: string | null
    inspectionDoc: string | null
  }

  export type TrailerCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    trailerId: number
    trailerType: number
    year: number
    vin: number
    color: number
    length: number
    width: number
    height: number
    capacity: number
    axleCount: number
    ownershipType: number
    purchaseDate: number
    leaseEndDate: number
    purchasePrice: number
    licensePlate: number
    issuingState: number
    registrationExp: number
    insurancePolicy: number
    insuranceExp: number
    jurisdiction: number
    gvwr: number
    status: number
    assignedYard: number
    currentLocation: number
    attachedTruckId: number
    titleDoc: number
    leaseDoc: number
    registrationDoc: number
    insuranceDoc: number
    inspectionDoc: number
    _all: number
  }


  export type TrailerAvgAggregateInputType = {
    year?: true
    length?: true
    width?: true
    height?: true
    capacity?: true
    axleCount?: true
    purchasePrice?: true
    gvwr?: true
  }

  export type TrailerSumAggregateInputType = {
    year?: true
    length?: true
    width?: true
    height?: true
    capacity?: true
    axleCount?: true
    purchasePrice?: true
    gvwr?: true
  }

  export type TrailerMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    trailerId?: true
    trailerType?: true
    year?: true
    vin?: true
    color?: true
    length?: true
    width?: true
    height?: true
    capacity?: true
    axleCount?: true
    ownershipType?: true
    purchaseDate?: true
    leaseEndDate?: true
    purchasePrice?: true
    licensePlate?: true
    issuingState?: true
    registrationExp?: true
    insurancePolicy?: true
    insuranceExp?: true
    jurisdiction?: true
    gvwr?: true
    status?: true
    assignedYard?: true
    currentLocation?: true
    attachedTruckId?: true
    titleDoc?: true
    leaseDoc?: true
    registrationDoc?: true
    insuranceDoc?: true
    inspectionDoc?: true
  }

  export type TrailerMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    trailerId?: true
    trailerType?: true
    year?: true
    vin?: true
    color?: true
    length?: true
    width?: true
    height?: true
    capacity?: true
    axleCount?: true
    ownershipType?: true
    purchaseDate?: true
    leaseEndDate?: true
    purchasePrice?: true
    licensePlate?: true
    issuingState?: true
    registrationExp?: true
    insurancePolicy?: true
    insuranceExp?: true
    jurisdiction?: true
    gvwr?: true
    status?: true
    assignedYard?: true
    currentLocation?: true
    attachedTruckId?: true
    titleDoc?: true
    leaseDoc?: true
    registrationDoc?: true
    insuranceDoc?: true
    inspectionDoc?: true
  }

  export type TrailerCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    trailerId?: true
    trailerType?: true
    year?: true
    vin?: true
    color?: true
    length?: true
    width?: true
    height?: true
    capacity?: true
    axleCount?: true
    ownershipType?: true
    purchaseDate?: true
    leaseEndDate?: true
    purchasePrice?: true
    licensePlate?: true
    issuingState?: true
    registrationExp?: true
    insurancePolicy?: true
    insuranceExp?: true
    jurisdiction?: true
    gvwr?: true
    status?: true
    assignedYard?: true
    currentLocation?: true
    attachedTruckId?: true
    titleDoc?: true
    leaseDoc?: true
    registrationDoc?: true
    insuranceDoc?: true
    inspectionDoc?: true
    _all?: true
  }

  export type TrailerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trailer to aggregate.
     */
    where?: TrailerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trailers to fetch.
     */
    orderBy?: TrailerOrderByWithRelationInput | TrailerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TrailerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trailers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trailers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Trailers
    **/
    _count?: true | TrailerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TrailerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TrailerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TrailerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TrailerMaxAggregateInputType
  }

  export type GetTrailerAggregateType<T extends TrailerAggregateArgs> = {
        [P in keyof T & keyof AggregateTrailer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTrailer[P]>
      : GetScalarType<T[P], AggregateTrailer[P]>
  }




  export type TrailerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TrailerWhereInput
    orderBy?: TrailerOrderByWithAggregationInput | TrailerOrderByWithAggregationInput[]
    by: TrailerScalarFieldEnum[] | TrailerScalarFieldEnum
    having?: TrailerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TrailerCountAggregateInputType | true
    _avg?: TrailerAvgAggregateInputType
    _sum?: TrailerSumAggregateInputType
    _min?: TrailerMinAggregateInputType
    _max?: TrailerMaxAggregateInputType
  }

  export type TrailerGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    trailerId: string
    trailerType: string
    year: number | null
    vin: string | null
    color: string | null
    length: number | null
    width: number | null
    height: number | null
    capacity: number | null
    axleCount: number | null
    ownershipType: string | null
    purchaseDate: Date | null
    leaseEndDate: Date | null
    purchasePrice: Decimal | null
    licensePlate: string | null
    issuingState: string | null
    registrationExp: Date | null
    insurancePolicy: string | null
    insuranceExp: Date | null
    jurisdiction: string | null
    gvwr: number | null
    status: string
    assignedYard: string | null
    currentLocation: string | null
    attachedTruckId: string | null
    titleDoc: string | null
    leaseDoc: string | null
    registrationDoc: string | null
    insuranceDoc: string | null
    inspectionDoc: string | null
    _count: TrailerCountAggregateOutputType | null
    _avg: TrailerAvgAggregateOutputType | null
    _sum: TrailerSumAggregateOutputType | null
    _min: TrailerMinAggregateOutputType | null
    _max: TrailerMaxAggregateOutputType | null
  }

  type GetTrailerGroupByPayload<T extends TrailerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TrailerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TrailerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TrailerGroupByOutputType[P]>
            : GetScalarType<T[P], TrailerGroupByOutputType[P]>
        }
      >
    >


  export type TrailerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    trailerId?: boolean
    trailerType?: boolean
    year?: boolean
    vin?: boolean
    color?: boolean
    length?: boolean
    width?: boolean
    height?: boolean
    capacity?: boolean
    axleCount?: boolean
    ownershipType?: boolean
    purchaseDate?: boolean
    leaseEndDate?: boolean
    purchasePrice?: boolean
    licensePlate?: boolean
    issuingState?: boolean
    registrationExp?: boolean
    insurancePolicy?: boolean
    insuranceExp?: boolean
    jurisdiction?: boolean
    gvwr?: boolean
    status?: boolean
    assignedYard?: boolean
    currentLocation?: boolean
    attachedTruckId?: boolean
    titleDoc?: boolean
    leaseDoc?: boolean
    registrationDoc?: boolean
    insuranceDoc?: boolean
    inspectionDoc?: boolean
  }, ExtArgs["result"]["trailer"]>

  export type TrailerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    trailerId?: boolean
    trailerType?: boolean
    year?: boolean
    vin?: boolean
    color?: boolean
    length?: boolean
    width?: boolean
    height?: boolean
    capacity?: boolean
    axleCount?: boolean
    ownershipType?: boolean
    purchaseDate?: boolean
    leaseEndDate?: boolean
    purchasePrice?: boolean
    licensePlate?: boolean
    issuingState?: boolean
    registrationExp?: boolean
    insurancePolicy?: boolean
    insuranceExp?: boolean
    jurisdiction?: boolean
    gvwr?: boolean
    status?: boolean
    assignedYard?: boolean
    currentLocation?: boolean
    attachedTruckId?: boolean
    titleDoc?: boolean
    leaseDoc?: boolean
    registrationDoc?: boolean
    insuranceDoc?: boolean
    inspectionDoc?: boolean
  }, ExtArgs["result"]["trailer"]>

  export type TrailerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    trailerId?: boolean
    trailerType?: boolean
    year?: boolean
    vin?: boolean
    color?: boolean
    length?: boolean
    width?: boolean
    height?: boolean
    capacity?: boolean
    axleCount?: boolean
    ownershipType?: boolean
    purchaseDate?: boolean
    leaseEndDate?: boolean
    purchasePrice?: boolean
    licensePlate?: boolean
    issuingState?: boolean
    registrationExp?: boolean
    insurancePolicy?: boolean
    insuranceExp?: boolean
    jurisdiction?: boolean
    gvwr?: boolean
    status?: boolean
    assignedYard?: boolean
    currentLocation?: boolean
    attachedTruckId?: boolean
    titleDoc?: boolean
    leaseDoc?: boolean
    registrationDoc?: boolean
    insuranceDoc?: boolean
    inspectionDoc?: boolean
  }, ExtArgs["result"]["trailer"]>

  export type TrailerSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    trailerId?: boolean
    trailerType?: boolean
    year?: boolean
    vin?: boolean
    color?: boolean
    length?: boolean
    width?: boolean
    height?: boolean
    capacity?: boolean
    axleCount?: boolean
    ownershipType?: boolean
    purchaseDate?: boolean
    leaseEndDate?: boolean
    purchasePrice?: boolean
    licensePlate?: boolean
    issuingState?: boolean
    registrationExp?: boolean
    insurancePolicy?: boolean
    insuranceExp?: boolean
    jurisdiction?: boolean
    gvwr?: boolean
    status?: boolean
    assignedYard?: boolean
    currentLocation?: boolean
    attachedTruckId?: boolean
    titleDoc?: boolean
    leaseDoc?: boolean
    registrationDoc?: boolean
    insuranceDoc?: boolean
    inspectionDoc?: boolean
  }

  export type TrailerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "trailerId" | "trailerType" | "year" | "vin" | "color" | "length" | "width" | "height" | "capacity" | "axleCount" | "ownershipType" | "purchaseDate" | "leaseEndDate" | "purchasePrice" | "licensePlate" | "issuingState" | "registrationExp" | "insurancePolicy" | "insuranceExp" | "jurisdiction" | "gvwr" | "status" | "assignedYard" | "currentLocation" | "attachedTruckId" | "titleDoc" | "leaseDoc" | "registrationDoc" | "insuranceDoc" | "inspectionDoc", ExtArgs["result"]["trailer"]>

  export type $TrailerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Trailer"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      trailerId: string
      trailerType: string
      year: number | null
      vin: string | null
      color: string | null
      length: number | null
      width: number | null
      height: number | null
      capacity: number | null
      axleCount: number | null
      ownershipType: string | null
      purchaseDate: Date | null
      leaseEndDate: Date | null
      purchasePrice: Prisma.Decimal | null
      licensePlate: string | null
      issuingState: string | null
      registrationExp: Date | null
      insurancePolicy: string | null
      insuranceExp: Date | null
      jurisdiction: string | null
      gvwr: number | null
      status: string
      assignedYard: string | null
      currentLocation: string | null
      attachedTruckId: string | null
      titleDoc: string | null
      leaseDoc: string | null
      registrationDoc: string | null
      insuranceDoc: string | null
      inspectionDoc: string | null
    }, ExtArgs["result"]["trailer"]>
    composites: {}
  }

  type TrailerGetPayload<S extends boolean | null | undefined | TrailerDefaultArgs> = $Result.GetResult<Prisma.$TrailerPayload, S>

  type TrailerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TrailerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TrailerCountAggregateInputType | true
    }

  export interface TrailerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Trailer'], meta: { name: 'Trailer' } }
    /**
     * Find zero or one Trailer that matches the filter.
     * @param {TrailerFindUniqueArgs} args - Arguments to find a Trailer
     * @example
     * // Get one Trailer
     * const trailer = await prisma.trailer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TrailerFindUniqueArgs>(args: SelectSubset<T, TrailerFindUniqueArgs<ExtArgs>>): Prisma__TrailerClient<$Result.GetResult<Prisma.$TrailerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Trailer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TrailerFindUniqueOrThrowArgs} args - Arguments to find a Trailer
     * @example
     * // Get one Trailer
     * const trailer = await prisma.trailer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TrailerFindUniqueOrThrowArgs>(args: SelectSubset<T, TrailerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TrailerClient<$Result.GetResult<Prisma.$TrailerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trailer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrailerFindFirstArgs} args - Arguments to find a Trailer
     * @example
     * // Get one Trailer
     * const trailer = await prisma.trailer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TrailerFindFirstArgs>(args?: SelectSubset<T, TrailerFindFirstArgs<ExtArgs>>): Prisma__TrailerClient<$Result.GetResult<Prisma.$TrailerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Trailer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrailerFindFirstOrThrowArgs} args - Arguments to find a Trailer
     * @example
     * // Get one Trailer
     * const trailer = await prisma.trailer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TrailerFindFirstOrThrowArgs>(args?: SelectSubset<T, TrailerFindFirstOrThrowArgs<ExtArgs>>): Prisma__TrailerClient<$Result.GetResult<Prisma.$TrailerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Trailers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrailerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Trailers
     * const trailers = await prisma.trailer.findMany()
     * 
     * // Get first 10 Trailers
     * const trailers = await prisma.trailer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const trailerWithIdOnly = await prisma.trailer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TrailerFindManyArgs>(args?: SelectSubset<T, TrailerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrailerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Trailer.
     * @param {TrailerCreateArgs} args - Arguments to create a Trailer.
     * @example
     * // Create one Trailer
     * const Trailer = await prisma.trailer.create({
     *   data: {
     *     // ... data to create a Trailer
     *   }
     * })
     * 
     */
    create<T extends TrailerCreateArgs>(args: SelectSubset<T, TrailerCreateArgs<ExtArgs>>): Prisma__TrailerClient<$Result.GetResult<Prisma.$TrailerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Trailers.
     * @param {TrailerCreateManyArgs} args - Arguments to create many Trailers.
     * @example
     * // Create many Trailers
     * const trailer = await prisma.trailer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TrailerCreateManyArgs>(args?: SelectSubset<T, TrailerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Trailers and returns the data saved in the database.
     * @param {TrailerCreateManyAndReturnArgs} args - Arguments to create many Trailers.
     * @example
     * // Create many Trailers
     * const trailer = await prisma.trailer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Trailers and only return the `id`
     * const trailerWithIdOnly = await prisma.trailer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TrailerCreateManyAndReturnArgs>(args?: SelectSubset<T, TrailerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrailerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Trailer.
     * @param {TrailerDeleteArgs} args - Arguments to delete one Trailer.
     * @example
     * // Delete one Trailer
     * const Trailer = await prisma.trailer.delete({
     *   where: {
     *     // ... filter to delete one Trailer
     *   }
     * })
     * 
     */
    delete<T extends TrailerDeleteArgs>(args: SelectSubset<T, TrailerDeleteArgs<ExtArgs>>): Prisma__TrailerClient<$Result.GetResult<Prisma.$TrailerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Trailer.
     * @param {TrailerUpdateArgs} args - Arguments to update one Trailer.
     * @example
     * // Update one Trailer
     * const trailer = await prisma.trailer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TrailerUpdateArgs>(args: SelectSubset<T, TrailerUpdateArgs<ExtArgs>>): Prisma__TrailerClient<$Result.GetResult<Prisma.$TrailerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Trailers.
     * @param {TrailerDeleteManyArgs} args - Arguments to filter Trailers to delete.
     * @example
     * // Delete a few Trailers
     * const { count } = await prisma.trailer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TrailerDeleteManyArgs>(args?: SelectSubset<T, TrailerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trailers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrailerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Trailers
     * const trailer = await prisma.trailer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TrailerUpdateManyArgs>(args: SelectSubset<T, TrailerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Trailers and returns the data updated in the database.
     * @param {TrailerUpdateManyAndReturnArgs} args - Arguments to update many Trailers.
     * @example
     * // Update many Trailers
     * const trailer = await prisma.trailer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Trailers and only return the `id`
     * const trailerWithIdOnly = await prisma.trailer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TrailerUpdateManyAndReturnArgs>(args: SelectSubset<T, TrailerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TrailerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Trailer.
     * @param {TrailerUpsertArgs} args - Arguments to update or create a Trailer.
     * @example
     * // Update or create a Trailer
     * const trailer = await prisma.trailer.upsert({
     *   create: {
     *     // ... data to create a Trailer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Trailer we want to update
     *   }
     * })
     */
    upsert<T extends TrailerUpsertArgs>(args: SelectSubset<T, TrailerUpsertArgs<ExtArgs>>): Prisma__TrailerClient<$Result.GetResult<Prisma.$TrailerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Trailers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrailerCountArgs} args - Arguments to filter Trailers to count.
     * @example
     * // Count the number of Trailers
     * const count = await prisma.trailer.count({
     *   where: {
     *     // ... the filter for the Trailers we want to count
     *   }
     * })
    **/
    count<T extends TrailerCountArgs>(
      args?: Subset<T, TrailerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TrailerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Trailer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrailerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TrailerAggregateArgs>(args: Subset<T, TrailerAggregateArgs>): Prisma.PrismaPromise<GetTrailerAggregateType<T>>

    /**
     * Group by Trailer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TrailerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TrailerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TrailerGroupByArgs['orderBy'] }
        : { orderBy?: TrailerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TrailerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTrailerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Trailer model
   */
  readonly fields: TrailerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Trailer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TrailerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Trailer model
   */
  interface TrailerFieldRefs {
    readonly id: FieldRef<"Trailer", 'String'>
    readonly createdAt: FieldRef<"Trailer", 'DateTime'>
    readonly updatedAt: FieldRef<"Trailer", 'DateTime'>
    readonly trailerId: FieldRef<"Trailer", 'String'>
    readonly trailerType: FieldRef<"Trailer", 'String'>
    readonly year: FieldRef<"Trailer", 'Int'>
    readonly vin: FieldRef<"Trailer", 'String'>
    readonly color: FieldRef<"Trailer", 'String'>
    readonly length: FieldRef<"Trailer", 'Int'>
    readonly width: FieldRef<"Trailer", 'Int'>
    readonly height: FieldRef<"Trailer", 'Int'>
    readonly capacity: FieldRef<"Trailer", 'Int'>
    readonly axleCount: FieldRef<"Trailer", 'Int'>
    readonly ownershipType: FieldRef<"Trailer", 'String'>
    readonly purchaseDate: FieldRef<"Trailer", 'DateTime'>
    readonly leaseEndDate: FieldRef<"Trailer", 'DateTime'>
    readonly purchasePrice: FieldRef<"Trailer", 'Decimal'>
    readonly licensePlate: FieldRef<"Trailer", 'String'>
    readonly issuingState: FieldRef<"Trailer", 'String'>
    readonly registrationExp: FieldRef<"Trailer", 'DateTime'>
    readonly insurancePolicy: FieldRef<"Trailer", 'String'>
    readonly insuranceExp: FieldRef<"Trailer", 'DateTime'>
    readonly jurisdiction: FieldRef<"Trailer", 'String'>
    readonly gvwr: FieldRef<"Trailer", 'Int'>
    readonly status: FieldRef<"Trailer", 'String'>
    readonly assignedYard: FieldRef<"Trailer", 'String'>
    readonly currentLocation: FieldRef<"Trailer", 'String'>
    readonly attachedTruckId: FieldRef<"Trailer", 'String'>
    readonly titleDoc: FieldRef<"Trailer", 'String'>
    readonly leaseDoc: FieldRef<"Trailer", 'String'>
    readonly registrationDoc: FieldRef<"Trailer", 'String'>
    readonly insuranceDoc: FieldRef<"Trailer", 'String'>
    readonly inspectionDoc: FieldRef<"Trailer", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Trailer findUnique
   */
  export type TrailerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trailer
     */
    select?: TrailerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trailer
     */
    omit?: TrailerOmit<ExtArgs> | null
    /**
     * Filter, which Trailer to fetch.
     */
    where: TrailerWhereUniqueInput
  }

  /**
   * Trailer findUniqueOrThrow
   */
  export type TrailerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trailer
     */
    select?: TrailerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trailer
     */
    omit?: TrailerOmit<ExtArgs> | null
    /**
     * Filter, which Trailer to fetch.
     */
    where: TrailerWhereUniqueInput
  }

  /**
   * Trailer findFirst
   */
  export type TrailerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trailer
     */
    select?: TrailerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trailer
     */
    omit?: TrailerOmit<ExtArgs> | null
    /**
     * Filter, which Trailer to fetch.
     */
    where?: TrailerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trailers to fetch.
     */
    orderBy?: TrailerOrderByWithRelationInput | TrailerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trailers.
     */
    cursor?: TrailerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trailers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trailers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trailers.
     */
    distinct?: TrailerScalarFieldEnum | TrailerScalarFieldEnum[]
  }

  /**
   * Trailer findFirstOrThrow
   */
  export type TrailerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trailer
     */
    select?: TrailerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trailer
     */
    omit?: TrailerOmit<ExtArgs> | null
    /**
     * Filter, which Trailer to fetch.
     */
    where?: TrailerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trailers to fetch.
     */
    orderBy?: TrailerOrderByWithRelationInput | TrailerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Trailers.
     */
    cursor?: TrailerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trailers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trailers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Trailers.
     */
    distinct?: TrailerScalarFieldEnum | TrailerScalarFieldEnum[]
  }

  /**
   * Trailer findMany
   */
  export type TrailerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trailer
     */
    select?: TrailerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trailer
     */
    omit?: TrailerOmit<ExtArgs> | null
    /**
     * Filter, which Trailers to fetch.
     */
    where?: TrailerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Trailers to fetch.
     */
    orderBy?: TrailerOrderByWithRelationInput | TrailerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Trailers.
     */
    cursor?: TrailerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Trailers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Trailers.
     */
    skip?: number
    distinct?: TrailerScalarFieldEnum | TrailerScalarFieldEnum[]
  }

  /**
   * Trailer create
   */
  export type TrailerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trailer
     */
    select?: TrailerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trailer
     */
    omit?: TrailerOmit<ExtArgs> | null
    /**
     * The data needed to create a Trailer.
     */
    data: XOR<TrailerCreateInput, TrailerUncheckedCreateInput>
  }

  /**
   * Trailer createMany
   */
  export type TrailerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Trailers.
     */
    data: TrailerCreateManyInput | TrailerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Trailer createManyAndReturn
   */
  export type TrailerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trailer
     */
    select?: TrailerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Trailer
     */
    omit?: TrailerOmit<ExtArgs> | null
    /**
     * The data used to create many Trailers.
     */
    data: TrailerCreateManyInput | TrailerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Trailer update
   */
  export type TrailerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trailer
     */
    select?: TrailerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trailer
     */
    omit?: TrailerOmit<ExtArgs> | null
    /**
     * The data needed to update a Trailer.
     */
    data: XOR<TrailerUpdateInput, TrailerUncheckedUpdateInput>
    /**
     * Choose, which Trailer to update.
     */
    where: TrailerWhereUniqueInput
  }

  /**
   * Trailer updateMany
   */
  export type TrailerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Trailers.
     */
    data: XOR<TrailerUpdateManyMutationInput, TrailerUncheckedUpdateManyInput>
    /**
     * Filter which Trailers to update
     */
    where?: TrailerWhereInput
    /**
     * Limit how many Trailers to update.
     */
    limit?: number
  }

  /**
   * Trailer updateManyAndReturn
   */
  export type TrailerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trailer
     */
    select?: TrailerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Trailer
     */
    omit?: TrailerOmit<ExtArgs> | null
    /**
     * The data used to update Trailers.
     */
    data: XOR<TrailerUpdateManyMutationInput, TrailerUncheckedUpdateManyInput>
    /**
     * Filter which Trailers to update
     */
    where?: TrailerWhereInput
    /**
     * Limit how many Trailers to update.
     */
    limit?: number
  }

  /**
   * Trailer upsert
   */
  export type TrailerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trailer
     */
    select?: TrailerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trailer
     */
    omit?: TrailerOmit<ExtArgs> | null
    /**
     * The filter to search for the Trailer to update in case it exists.
     */
    where: TrailerWhereUniqueInput
    /**
     * In case the Trailer found by the `where` argument doesn't exist, create a new Trailer with this data.
     */
    create: XOR<TrailerCreateInput, TrailerUncheckedCreateInput>
    /**
     * In case the Trailer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TrailerUpdateInput, TrailerUncheckedUpdateInput>
  }

  /**
   * Trailer delete
   */
  export type TrailerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trailer
     */
    select?: TrailerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trailer
     */
    omit?: TrailerOmit<ExtArgs> | null
    /**
     * Filter which Trailer to delete.
     */
    where: TrailerWhereUniqueInput
  }

  /**
   * Trailer deleteMany
   */
  export type TrailerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Trailers to delete
     */
    where?: TrailerWhereInput
    /**
     * Limit how many Trailers to delete.
     */
    limit?: number
  }

  /**
   * Trailer without action
   */
  export type TrailerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Trailer
     */
    select?: TrailerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Trailer
     */
    omit?: TrailerOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const TrailerScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    trailerId: 'trailerId',
    trailerType: 'trailerType',
    year: 'year',
    vin: 'vin',
    color: 'color',
    length: 'length',
    width: 'width',
    height: 'height',
    capacity: 'capacity',
    axleCount: 'axleCount',
    ownershipType: 'ownershipType',
    purchaseDate: 'purchaseDate',
    leaseEndDate: 'leaseEndDate',
    purchasePrice: 'purchasePrice',
    licensePlate: 'licensePlate',
    issuingState: 'issuingState',
    registrationExp: 'registrationExp',
    insurancePolicy: 'insurancePolicy',
    insuranceExp: 'insuranceExp',
    jurisdiction: 'jurisdiction',
    gvwr: 'gvwr',
    status: 'status',
    assignedYard: 'assignedYard',
    currentLocation: 'currentLocation',
    attachedTruckId: 'attachedTruckId',
    titleDoc: 'titleDoc',
    leaseDoc: 'leaseDoc',
    registrationDoc: 'registrationDoc',
    insuranceDoc: 'insuranceDoc',
    inspectionDoc: 'inspectionDoc'
  };

  export type TrailerScalarFieldEnum = (typeof TrailerScalarFieldEnum)[keyof typeof TrailerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type TrailerWhereInput = {
    AND?: TrailerWhereInput | TrailerWhereInput[]
    OR?: TrailerWhereInput[]
    NOT?: TrailerWhereInput | TrailerWhereInput[]
    id?: StringFilter<"Trailer"> | string
    createdAt?: DateTimeFilter<"Trailer"> | Date | string
    updatedAt?: DateTimeFilter<"Trailer"> | Date | string
    trailerId?: StringFilter<"Trailer"> | string
    trailerType?: StringFilter<"Trailer"> | string
    year?: IntNullableFilter<"Trailer"> | number | null
    vin?: StringNullableFilter<"Trailer"> | string | null
    color?: StringNullableFilter<"Trailer"> | string | null
    length?: IntNullableFilter<"Trailer"> | number | null
    width?: IntNullableFilter<"Trailer"> | number | null
    height?: IntNullableFilter<"Trailer"> | number | null
    capacity?: IntNullableFilter<"Trailer"> | number | null
    axleCount?: IntNullableFilter<"Trailer"> | number | null
    ownershipType?: StringNullableFilter<"Trailer"> | string | null
    purchaseDate?: DateTimeNullableFilter<"Trailer"> | Date | string | null
    leaseEndDate?: DateTimeNullableFilter<"Trailer"> | Date | string | null
    purchasePrice?: DecimalNullableFilter<"Trailer"> | Decimal | DecimalJsLike | number | string | null
    licensePlate?: StringNullableFilter<"Trailer"> | string | null
    issuingState?: StringNullableFilter<"Trailer"> | string | null
    registrationExp?: DateTimeNullableFilter<"Trailer"> | Date | string | null
    insurancePolicy?: StringNullableFilter<"Trailer"> | string | null
    insuranceExp?: DateTimeNullableFilter<"Trailer"> | Date | string | null
    jurisdiction?: StringNullableFilter<"Trailer"> | string | null
    gvwr?: IntNullableFilter<"Trailer"> | number | null
    status?: StringFilter<"Trailer"> | string
    assignedYard?: StringNullableFilter<"Trailer"> | string | null
    currentLocation?: StringNullableFilter<"Trailer"> | string | null
    attachedTruckId?: StringNullableFilter<"Trailer"> | string | null
    titleDoc?: StringNullableFilter<"Trailer"> | string | null
    leaseDoc?: StringNullableFilter<"Trailer"> | string | null
    registrationDoc?: StringNullableFilter<"Trailer"> | string | null
    insuranceDoc?: StringNullableFilter<"Trailer"> | string | null
    inspectionDoc?: StringNullableFilter<"Trailer"> | string | null
  }

  export type TrailerOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    trailerId?: SortOrder
    trailerType?: SortOrder
    year?: SortOrderInput | SortOrder
    vin?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    length?: SortOrderInput | SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    axleCount?: SortOrderInput | SortOrder
    ownershipType?: SortOrderInput | SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    leaseEndDate?: SortOrderInput | SortOrder
    purchasePrice?: SortOrderInput | SortOrder
    licensePlate?: SortOrderInput | SortOrder
    issuingState?: SortOrderInput | SortOrder
    registrationExp?: SortOrderInput | SortOrder
    insurancePolicy?: SortOrderInput | SortOrder
    insuranceExp?: SortOrderInput | SortOrder
    jurisdiction?: SortOrderInput | SortOrder
    gvwr?: SortOrderInput | SortOrder
    status?: SortOrder
    assignedYard?: SortOrderInput | SortOrder
    currentLocation?: SortOrderInput | SortOrder
    attachedTruckId?: SortOrderInput | SortOrder
    titleDoc?: SortOrderInput | SortOrder
    leaseDoc?: SortOrderInput | SortOrder
    registrationDoc?: SortOrderInput | SortOrder
    insuranceDoc?: SortOrderInput | SortOrder
    inspectionDoc?: SortOrderInput | SortOrder
  }

  export type TrailerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    trailerId?: string
    vin?: string
    AND?: TrailerWhereInput | TrailerWhereInput[]
    OR?: TrailerWhereInput[]
    NOT?: TrailerWhereInput | TrailerWhereInput[]
    createdAt?: DateTimeFilter<"Trailer"> | Date | string
    updatedAt?: DateTimeFilter<"Trailer"> | Date | string
    trailerType?: StringFilter<"Trailer"> | string
    year?: IntNullableFilter<"Trailer"> | number | null
    color?: StringNullableFilter<"Trailer"> | string | null
    length?: IntNullableFilter<"Trailer"> | number | null
    width?: IntNullableFilter<"Trailer"> | number | null
    height?: IntNullableFilter<"Trailer"> | number | null
    capacity?: IntNullableFilter<"Trailer"> | number | null
    axleCount?: IntNullableFilter<"Trailer"> | number | null
    ownershipType?: StringNullableFilter<"Trailer"> | string | null
    purchaseDate?: DateTimeNullableFilter<"Trailer"> | Date | string | null
    leaseEndDate?: DateTimeNullableFilter<"Trailer"> | Date | string | null
    purchasePrice?: DecimalNullableFilter<"Trailer"> | Decimal | DecimalJsLike | number | string | null
    licensePlate?: StringNullableFilter<"Trailer"> | string | null
    issuingState?: StringNullableFilter<"Trailer"> | string | null
    registrationExp?: DateTimeNullableFilter<"Trailer"> | Date | string | null
    insurancePolicy?: StringNullableFilter<"Trailer"> | string | null
    insuranceExp?: DateTimeNullableFilter<"Trailer"> | Date | string | null
    jurisdiction?: StringNullableFilter<"Trailer"> | string | null
    gvwr?: IntNullableFilter<"Trailer"> | number | null
    status?: StringFilter<"Trailer"> | string
    assignedYard?: StringNullableFilter<"Trailer"> | string | null
    currentLocation?: StringNullableFilter<"Trailer"> | string | null
    attachedTruckId?: StringNullableFilter<"Trailer"> | string | null
    titleDoc?: StringNullableFilter<"Trailer"> | string | null
    leaseDoc?: StringNullableFilter<"Trailer"> | string | null
    registrationDoc?: StringNullableFilter<"Trailer"> | string | null
    insuranceDoc?: StringNullableFilter<"Trailer"> | string | null
    inspectionDoc?: StringNullableFilter<"Trailer"> | string | null
  }, "id" | "trailerId" | "vin">

  export type TrailerOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    trailerId?: SortOrder
    trailerType?: SortOrder
    year?: SortOrderInput | SortOrder
    vin?: SortOrderInput | SortOrder
    color?: SortOrderInput | SortOrder
    length?: SortOrderInput | SortOrder
    width?: SortOrderInput | SortOrder
    height?: SortOrderInput | SortOrder
    capacity?: SortOrderInput | SortOrder
    axleCount?: SortOrderInput | SortOrder
    ownershipType?: SortOrderInput | SortOrder
    purchaseDate?: SortOrderInput | SortOrder
    leaseEndDate?: SortOrderInput | SortOrder
    purchasePrice?: SortOrderInput | SortOrder
    licensePlate?: SortOrderInput | SortOrder
    issuingState?: SortOrderInput | SortOrder
    registrationExp?: SortOrderInput | SortOrder
    insurancePolicy?: SortOrderInput | SortOrder
    insuranceExp?: SortOrderInput | SortOrder
    jurisdiction?: SortOrderInput | SortOrder
    gvwr?: SortOrderInput | SortOrder
    status?: SortOrder
    assignedYard?: SortOrderInput | SortOrder
    currentLocation?: SortOrderInput | SortOrder
    attachedTruckId?: SortOrderInput | SortOrder
    titleDoc?: SortOrderInput | SortOrder
    leaseDoc?: SortOrderInput | SortOrder
    registrationDoc?: SortOrderInput | SortOrder
    insuranceDoc?: SortOrderInput | SortOrder
    inspectionDoc?: SortOrderInput | SortOrder
    _count?: TrailerCountOrderByAggregateInput
    _avg?: TrailerAvgOrderByAggregateInput
    _max?: TrailerMaxOrderByAggregateInput
    _min?: TrailerMinOrderByAggregateInput
    _sum?: TrailerSumOrderByAggregateInput
  }

  export type TrailerScalarWhereWithAggregatesInput = {
    AND?: TrailerScalarWhereWithAggregatesInput | TrailerScalarWhereWithAggregatesInput[]
    OR?: TrailerScalarWhereWithAggregatesInput[]
    NOT?: TrailerScalarWhereWithAggregatesInput | TrailerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Trailer"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Trailer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Trailer"> | Date | string
    trailerId?: StringWithAggregatesFilter<"Trailer"> | string
    trailerType?: StringWithAggregatesFilter<"Trailer"> | string
    year?: IntNullableWithAggregatesFilter<"Trailer"> | number | null
    vin?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
    color?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
    length?: IntNullableWithAggregatesFilter<"Trailer"> | number | null
    width?: IntNullableWithAggregatesFilter<"Trailer"> | number | null
    height?: IntNullableWithAggregatesFilter<"Trailer"> | number | null
    capacity?: IntNullableWithAggregatesFilter<"Trailer"> | number | null
    axleCount?: IntNullableWithAggregatesFilter<"Trailer"> | number | null
    ownershipType?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
    purchaseDate?: DateTimeNullableWithAggregatesFilter<"Trailer"> | Date | string | null
    leaseEndDate?: DateTimeNullableWithAggregatesFilter<"Trailer"> | Date | string | null
    purchasePrice?: DecimalNullableWithAggregatesFilter<"Trailer"> | Decimal | DecimalJsLike | number | string | null
    licensePlate?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
    issuingState?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
    registrationExp?: DateTimeNullableWithAggregatesFilter<"Trailer"> | Date | string | null
    insurancePolicy?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
    insuranceExp?: DateTimeNullableWithAggregatesFilter<"Trailer"> | Date | string | null
    jurisdiction?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
    gvwr?: IntNullableWithAggregatesFilter<"Trailer"> | number | null
    status?: StringWithAggregatesFilter<"Trailer"> | string
    assignedYard?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
    currentLocation?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
    attachedTruckId?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
    titleDoc?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
    leaseDoc?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
    registrationDoc?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
    insuranceDoc?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
    inspectionDoc?: StringNullableWithAggregatesFilter<"Trailer"> | string | null
  }

  export type TrailerCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    trailerId: string
    trailerType?: string
    year?: number | null
    vin?: string | null
    color?: string | null
    length?: number | null
    width?: number | null
    height?: number | null
    capacity?: number | null
    axleCount?: number | null
    ownershipType?: string | null
    purchaseDate?: Date | string | null
    leaseEndDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    licensePlate?: string | null
    issuingState?: string | null
    registrationExp?: Date | string | null
    insurancePolicy?: string | null
    insuranceExp?: Date | string | null
    jurisdiction?: string | null
    gvwr?: number | null
    status?: string
    assignedYard?: string | null
    currentLocation?: string | null
    attachedTruckId?: string | null
    titleDoc?: string | null
    leaseDoc?: string | null
    registrationDoc?: string | null
    insuranceDoc?: string | null
    inspectionDoc?: string | null
  }

  export type TrailerUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    trailerId: string
    trailerType?: string
    year?: number | null
    vin?: string | null
    color?: string | null
    length?: number | null
    width?: number | null
    height?: number | null
    capacity?: number | null
    axleCount?: number | null
    ownershipType?: string | null
    purchaseDate?: Date | string | null
    leaseEndDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    licensePlate?: string | null
    issuingState?: string | null
    registrationExp?: Date | string | null
    insurancePolicy?: string | null
    insuranceExp?: Date | string | null
    jurisdiction?: string | null
    gvwr?: number | null
    status?: string
    assignedYard?: string | null
    currentLocation?: string | null
    attachedTruckId?: string | null
    titleDoc?: string | null
    leaseDoc?: string | null
    registrationDoc?: string | null
    insuranceDoc?: string | null
    inspectionDoc?: string | null
  }

  export type TrailerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trailerId?: StringFieldUpdateOperationsInput | string
    trailerType?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    length?: NullableIntFieldUpdateOperationsInput | number | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    axleCount?: NullableIntFieldUpdateOperationsInput | number | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    leaseEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    licensePlate?: NullableStringFieldUpdateOperationsInput | string | null
    issuingState?: NullableStringFieldUpdateOperationsInput | string | null
    registrationExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    insurancePolicy?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jurisdiction?: NullableStringFieldUpdateOperationsInput | string | null
    gvwr?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    assignedYard?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    attachedTruckId?: NullableStringFieldUpdateOperationsInput | string | null
    titleDoc?: NullableStringFieldUpdateOperationsInput | string | null
    leaseDoc?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDoc?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceDoc?: NullableStringFieldUpdateOperationsInput | string | null
    inspectionDoc?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrailerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trailerId?: StringFieldUpdateOperationsInput | string
    trailerType?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    length?: NullableIntFieldUpdateOperationsInput | number | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    axleCount?: NullableIntFieldUpdateOperationsInput | number | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    leaseEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    licensePlate?: NullableStringFieldUpdateOperationsInput | string | null
    issuingState?: NullableStringFieldUpdateOperationsInput | string | null
    registrationExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    insurancePolicy?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jurisdiction?: NullableStringFieldUpdateOperationsInput | string | null
    gvwr?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    assignedYard?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    attachedTruckId?: NullableStringFieldUpdateOperationsInput | string | null
    titleDoc?: NullableStringFieldUpdateOperationsInput | string | null
    leaseDoc?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDoc?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceDoc?: NullableStringFieldUpdateOperationsInput | string | null
    inspectionDoc?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrailerCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    trailerId: string
    trailerType?: string
    year?: number | null
    vin?: string | null
    color?: string | null
    length?: number | null
    width?: number | null
    height?: number | null
    capacity?: number | null
    axleCount?: number | null
    ownershipType?: string | null
    purchaseDate?: Date | string | null
    leaseEndDate?: Date | string | null
    purchasePrice?: Decimal | DecimalJsLike | number | string | null
    licensePlate?: string | null
    issuingState?: string | null
    registrationExp?: Date | string | null
    insurancePolicy?: string | null
    insuranceExp?: Date | string | null
    jurisdiction?: string | null
    gvwr?: number | null
    status?: string
    assignedYard?: string | null
    currentLocation?: string | null
    attachedTruckId?: string | null
    titleDoc?: string | null
    leaseDoc?: string | null
    registrationDoc?: string | null
    insuranceDoc?: string | null
    inspectionDoc?: string | null
  }

  export type TrailerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trailerId?: StringFieldUpdateOperationsInput | string
    trailerType?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    length?: NullableIntFieldUpdateOperationsInput | number | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    axleCount?: NullableIntFieldUpdateOperationsInput | number | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    leaseEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    licensePlate?: NullableStringFieldUpdateOperationsInput | string | null
    issuingState?: NullableStringFieldUpdateOperationsInput | string | null
    registrationExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    insurancePolicy?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jurisdiction?: NullableStringFieldUpdateOperationsInput | string | null
    gvwr?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    assignedYard?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    attachedTruckId?: NullableStringFieldUpdateOperationsInput | string | null
    titleDoc?: NullableStringFieldUpdateOperationsInput | string | null
    leaseDoc?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDoc?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceDoc?: NullableStringFieldUpdateOperationsInput | string | null
    inspectionDoc?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TrailerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    trailerId?: StringFieldUpdateOperationsInput | string
    trailerType?: StringFieldUpdateOperationsInput | string
    year?: NullableIntFieldUpdateOperationsInput | number | null
    vin?: NullableStringFieldUpdateOperationsInput | string | null
    color?: NullableStringFieldUpdateOperationsInput | string | null
    length?: NullableIntFieldUpdateOperationsInput | number | null
    width?: NullableIntFieldUpdateOperationsInput | number | null
    height?: NullableIntFieldUpdateOperationsInput | number | null
    capacity?: NullableIntFieldUpdateOperationsInput | number | null
    axleCount?: NullableIntFieldUpdateOperationsInput | number | null
    ownershipType?: NullableStringFieldUpdateOperationsInput | string | null
    purchaseDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    leaseEndDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    purchasePrice?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    licensePlate?: NullableStringFieldUpdateOperationsInput | string | null
    issuingState?: NullableStringFieldUpdateOperationsInput | string | null
    registrationExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    insurancePolicy?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceExp?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    jurisdiction?: NullableStringFieldUpdateOperationsInput | string | null
    gvwr?: NullableIntFieldUpdateOperationsInput | number | null
    status?: StringFieldUpdateOperationsInput | string
    assignedYard?: NullableStringFieldUpdateOperationsInput | string | null
    currentLocation?: NullableStringFieldUpdateOperationsInput | string | null
    attachedTruckId?: NullableStringFieldUpdateOperationsInput | string | null
    titleDoc?: NullableStringFieldUpdateOperationsInput | string | null
    leaseDoc?: NullableStringFieldUpdateOperationsInput | string | null
    registrationDoc?: NullableStringFieldUpdateOperationsInput | string | null
    insuranceDoc?: NullableStringFieldUpdateOperationsInput | string | null
    inspectionDoc?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TrailerCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    trailerId?: SortOrder
    trailerType?: SortOrder
    year?: SortOrder
    vin?: SortOrder
    color?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    capacity?: SortOrder
    axleCount?: SortOrder
    ownershipType?: SortOrder
    purchaseDate?: SortOrder
    leaseEndDate?: SortOrder
    purchasePrice?: SortOrder
    licensePlate?: SortOrder
    issuingState?: SortOrder
    registrationExp?: SortOrder
    insurancePolicy?: SortOrder
    insuranceExp?: SortOrder
    jurisdiction?: SortOrder
    gvwr?: SortOrder
    status?: SortOrder
    assignedYard?: SortOrder
    currentLocation?: SortOrder
    attachedTruckId?: SortOrder
    titleDoc?: SortOrder
    leaseDoc?: SortOrder
    registrationDoc?: SortOrder
    insuranceDoc?: SortOrder
    inspectionDoc?: SortOrder
  }

  export type TrailerAvgOrderByAggregateInput = {
    year?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    capacity?: SortOrder
    axleCount?: SortOrder
    purchasePrice?: SortOrder
    gvwr?: SortOrder
  }

  export type TrailerMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    trailerId?: SortOrder
    trailerType?: SortOrder
    year?: SortOrder
    vin?: SortOrder
    color?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    capacity?: SortOrder
    axleCount?: SortOrder
    ownershipType?: SortOrder
    purchaseDate?: SortOrder
    leaseEndDate?: SortOrder
    purchasePrice?: SortOrder
    licensePlate?: SortOrder
    issuingState?: SortOrder
    registrationExp?: SortOrder
    insurancePolicy?: SortOrder
    insuranceExp?: SortOrder
    jurisdiction?: SortOrder
    gvwr?: SortOrder
    status?: SortOrder
    assignedYard?: SortOrder
    currentLocation?: SortOrder
    attachedTruckId?: SortOrder
    titleDoc?: SortOrder
    leaseDoc?: SortOrder
    registrationDoc?: SortOrder
    insuranceDoc?: SortOrder
    inspectionDoc?: SortOrder
  }

  export type TrailerMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    trailerId?: SortOrder
    trailerType?: SortOrder
    year?: SortOrder
    vin?: SortOrder
    color?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    capacity?: SortOrder
    axleCount?: SortOrder
    ownershipType?: SortOrder
    purchaseDate?: SortOrder
    leaseEndDate?: SortOrder
    purchasePrice?: SortOrder
    licensePlate?: SortOrder
    issuingState?: SortOrder
    registrationExp?: SortOrder
    insurancePolicy?: SortOrder
    insuranceExp?: SortOrder
    jurisdiction?: SortOrder
    gvwr?: SortOrder
    status?: SortOrder
    assignedYard?: SortOrder
    currentLocation?: SortOrder
    attachedTruckId?: SortOrder
    titleDoc?: SortOrder
    leaseDoc?: SortOrder
    registrationDoc?: SortOrder
    insuranceDoc?: SortOrder
    inspectionDoc?: SortOrder
  }

  export type TrailerSumOrderByAggregateInput = {
    year?: SortOrder
    length?: SortOrder
    width?: SortOrder
    height?: SortOrder
    capacity?: SortOrder
    axleCount?: SortOrder
    purchasePrice?: SortOrder
    gvwr?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel> | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}